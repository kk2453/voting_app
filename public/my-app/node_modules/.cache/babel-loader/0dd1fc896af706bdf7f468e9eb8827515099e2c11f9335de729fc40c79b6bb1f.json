{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\adity\\\\Desktop\\\\Voter\\\\my-app\\\\src\\\\components\\\\Otp.js\",\n  _s = $RefreshSig$();\n// import React from 'react';\n// import { TextField, Button, Typography, Box, Grid, Paper } from '@mui/material';\n\n// const Otp = (props) => {\n\n//   return (\n//     <Grid container justifyContent=\"center\" alignItems=\"center\" style={{ minHeight: '100vh' }}>\n//       <Paper elevation={3} style={{ padding: '30px', width: '350px', textAlign: 'center' }}>\n//         <Typography variant=\"h5\" gutterBottom>\n//           Get OTP via Email\n//         </Typography>\n//         <form>\n//           <TextField\n//             label=\"Enter your email\"\n//             variant=\"outlined\"\n//             fullWidth\n//             required\n//             value={props.email}\n//             onChange={(e) => props.setEmail(e.target.value)}\n//             style={{ marginBottom: '20px' }}\n//           />\n//           <Button type=\"submit\" variant=\"contained\" color=\"primary\" fullWidth>\n//             Send OTP\n//           </Button>\n//         </form>\n//         {props.message && <Typography style={{ color: 'green', marginTop: '20px' }}>{props.message}</Typography>}\n//         {props.error && <Typography style={{ color: 'red', marginTop: '20px' }}>{props.error}</Typography>}\n//       </Paper>\n//     </Grid>\n//   );\n// };\n\n// export default Otp;\n\nimport React, { useState } from 'react';\nimport { TextField, Button, Box, Typography, Grid, Paper } from '@mui/material';\nimport './OtpPage.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Otp = () => {\n  _s();\n  const [otp, setOtp] = useState(new Array(6).fill(\"\"));\n  const [error, setError] = useState(false);\n  const handleChange = (element, index) => {\n    if (isNaN(element.value)) return; // Allow only numbers\n    setOtp([...otp.map((d, idx) => idx === index ? element.value : d)]);\n\n    // Move to the next input field automatically\n    if (element.nextSibling && element.value) {\n      element.nextSibling.focus();\n    }\n  };\n  const handleSubmit1 = e => {\n    e.preventDefault();\n    const otpValue = otp.join(\"\");\n    if (otpValue.length === 6) {\n      setError(false);\n      console.log(\"Entered OTP:\", otpValue);\n      // Here you can add the API call to verify the OTP\n    } else {\n      setError(true);\n    }\n  };\n  const [isRecording, setIsRecording] = useState(false);\n  const [videoURL, setVideoURL] = useState(null);\n  const mediaRecorderRef = useRef(null);\n  const recordedChunks = useRef([]);\n  const startRecording = async () => {\n    try {\n      // Capture the screen\n      const stream = await navigator.mediaDevices.getDisplayMedia({\n        video: {\n          mediaSource: 'screen'\n        }\n      });\n\n      // Initialize MediaRecorder\n      mediaRecorderRef.current = new MediaRecorder(stream, {\n        mimeType: 'video/webm'\n      });\n\n      // Collect the recorded chunks of data\n      mediaRecorderRef.current.ondataavailable = event => {\n        if (event.data.size > 0) {\n          recordedChunks.current.push(event.data);\n        }\n      };\n\n      // Handle the stop event\n      mediaRecorderRef.current.onstop = () => {\n        // Create a video URL from the recorded chunks\n        const blob = new Blob(recordedChunks.current, {\n          type: 'video/webm'\n        });\n        const videoURL = URL.createObjectURL(blob);\n        setVideoURL(videoURL);\n        recordedChunks.current = []; // Clear the recorded chunks\n      };\n\n      // Start the recording\n      mediaRecorderRef.current.start();\n      setIsRecording(true);\n    } catch (err) {\n      console.error('Error accessing display media', err);\n    }\n  };\n  const stopRecording = () => {\n    // Stop the recording\n    mediaRecorderRef.current.stop();\n    setIsRecording(false);\n  };\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    container: true,\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    style: {\n      minHeight: \"100vh\"\n    },\n    children: /*#__PURE__*/_jsxDEV(Paper, {\n      elevation: 3,\n      className: \"otp-paper\",\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h4\",\n        align: \"center\",\n        gutterBottom: true,\n        children: \"Enter OTP\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body1\",\n        align: \"center\",\n        color: \"textSecondary\",\n        children: \"Please enter the 6-digit code sent to your mobile number\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit1,\n        style: {\n          marginTop: \"20px\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(Box, {\n          display: \"flex\",\n          justifyContent: \"center\",\n          mb: 2,\n          children: otp.map((data, index) => /*#__PURE__*/_jsxDEV(TextField, {\n            type: \"text\",\n            inputProps: {\n              maxLength: 1,\n              style: {\n                textAlign: 'center',\n                fontSize: '24px'\n              }\n            },\n            value: data,\n            onChange: e => handleChange(e.target, index),\n            onFocus: e => e.target.select(),\n            className: \"otp-input\"\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 11\n        }, this), error && /*#__PURE__*/_jsxDEV(Typography, {\n          color: \"error\",\n          align: \"center\",\n          children: \"Please enter all 6 digits\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          textAlign: \"center\",\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            type: \"submit\",\n            variant: \"contained\",\n            color: \"primary\",\n            className: \"submit-btn\",\n            children: \"Verify OTP\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 141,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 117,\n    columnNumber: 5\n  }, this);\n};\n_s(Otp, \"flmhZp19BOPf+pT6sk1rHjiFLfc=\");\n_c = Otp;\nexport default Otp;\nvar _c;\n$RefreshReg$(_c, \"Otp\");","map":{"version":3,"names":["React","useState","TextField","Button","Box","Typography","Grid","Paper","jsxDEV","_jsxDEV","Otp","_s","otp","setOtp","Array","fill","error","setError","handleChange","element","index","isNaN","value","map","d","idx","nextSibling","focus","handleSubmit1","e","preventDefault","otpValue","join","length","console","log","isRecording","setIsRecording","videoURL","setVideoURL","mediaRecorderRef","useRef","recordedChunks","startRecording","stream","navigator","mediaDevices","getDisplayMedia","video","mediaSource","current","MediaRecorder","mimeType","ondataavailable","event","data","size","push","onstop","blob","Blob","type","URL","createObjectURL","start","err","stopRecording","stop","container","justifyContent","alignItems","style","minHeight","children","elevation","className","variant","align","gutterBottom","fileName","_jsxFileName","lineNumber","columnNumber","color","onSubmit","marginTop","display","mb","inputProps","maxLength","textAlign","fontSize","onChange","target","onFocus","select","_c","$RefreshReg$"],"sources":["C:/Users/adity/Desktop/Voter/my-app/src/components/Otp.js"],"sourcesContent":["// import React from 'react';\r\n// import { TextField, Button, Typography, Box, Grid, Paper } from '@mui/material';\r\n\r\n// const Otp = (props) => {\r\n\r\n\r\n \r\n\r\n//   return (\r\n//     <Grid container justifyContent=\"center\" alignItems=\"center\" style={{ minHeight: '100vh' }}>\r\n//       <Paper elevation={3} style={{ padding: '30px', width: '350px', textAlign: 'center' }}>\r\n//         <Typography variant=\"h5\" gutterBottom>\r\n//           Get OTP via Email\r\n//         </Typography>\r\n//         <form>\r\n//           <TextField\r\n//             label=\"Enter your email\"\r\n//             variant=\"outlined\"\r\n//             fullWidth\r\n//             required\r\n//             value={props.email}\r\n//             onChange={(e) => props.setEmail(e.target.value)}\r\n//             style={{ marginBottom: '20px' }}\r\n//           />\r\n//           <Button type=\"submit\" variant=\"contained\" color=\"primary\" fullWidth>\r\n//             Send OTP\r\n//           </Button>\r\n//         </form>\r\n//         {props.message && <Typography style={{ color: 'green', marginTop: '20px' }}>{props.message}</Typography>}\r\n//         {props.error && <Typography style={{ color: 'red', marginTop: '20px' }}>{props.error}</Typography>}\r\n//       </Paper>\r\n//     </Grid>\r\n//   );\r\n// };\r\n\r\n// export default Otp;\r\n\r\nimport React, { useState } from 'react';\r\nimport { TextField, Button, Box, Typography, Grid, Paper } from '@mui/material';\r\nimport './OtpPage.css';\r\n\r\nconst Otp = () => {\r\n  const [otp, setOtp] = useState(new Array(6).fill(\"\"));\r\n  const [error, setError] = useState(false);\r\n\r\n  const handleChange = (element, index) => {\r\n    if (isNaN(element.value)) return; // Allow only numbers\r\n    setOtp([...otp.map((d, idx) => (idx === index ? element.value : d))]);\r\n\r\n    // Move to the next input field automatically\r\n    if (element.nextSibling && element.value) {\r\n      element.nextSibling.focus();\r\n    }\r\n  };\r\n\r\n  const handleSubmit1 = (e) => {\r\n    e.preventDefault();\r\n    const otpValue = otp.join(\"\");\r\n    if (otpValue.length === 6) {\r\n      setError(false);\r\n      console.log(\"Entered OTP:\", otpValue);\r\n      // Here you can add the API call to verify the OTP\r\n    } else {\r\n      setError(true);\r\n    }\r\n  };\r\n\r\n\r\n  const [isRecording, setIsRecording] = useState(false);\r\n  const [videoURL, setVideoURL] = useState(null);\r\n  const mediaRecorderRef = useRef(null);\r\n  const recordedChunks = useRef([]);\r\n  \r\n  const startRecording = async () => {\r\n    try {\r\n      // Capture the screen\r\n      const stream = await navigator.mediaDevices.getDisplayMedia({\r\n        video: { mediaSource: 'screen' },\r\n      });\r\n\r\n      // Initialize MediaRecorder\r\n      mediaRecorderRef.current = new MediaRecorder(stream, {\r\n        mimeType: 'video/webm',\r\n      });\r\n\r\n      // Collect the recorded chunks of data\r\n      mediaRecorderRef.current.ondataavailable = (event) => {\r\n        if (event.data.size > 0) {\r\n          recordedChunks.current.push(event.data);\r\n        }\r\n      };\r\n\r\n      // Handle the stop event\r\n      mediaRecorderRef.current.onstop = () => {\r\n        // Create a video URL from the recorded chunks\r\n        const blob = new Blob(recordedChunks.current, { type: 'video/webm' });\r\n        const videoURL = URL.createObjectURL(blob);\r\n        setVideoURL(videoURL);\r\n        recordedChunks.current = []; // Clear the recorded chunks\r\n      };\r\n\r\n      // Start the recording\r\n      mediaRecorderRef.current.start();\r\n      setIsRecording(true);\r\n    } catch (err) {\r\n      console.error('Error accessing display media', err);\r\n    }\r\n  };\r\n\r\n  const stopRecording = () => {\r\n    // Stop the recording\r\n    mediaRecorderRef.current.stop();\r\n    setIsRecording(false);\r\n  };\r\n\r\n  return (\r\n    <Grid container justifyContent=\"center\" alignItems=\"center\" style={{ minHeight: \"100vh\" }}>\r\n      <Paper elevation={3} className=\"otp-paper\">\r\n        <Typography variant=\"h4\" align=\"center\" gutterBottom>\r\n          Enter OTP\r\n        </Typography>\r\n        <Typography variant=\"body1\" align=\"center\" color=\"textSecondary\">\r\n          Please enter the 6-digit code sent to your mobile number\r\n        </Typography>\r\n        <form onSubmit={handleSubmit1} style={{ marginTop: \"20px\" }}>\r\n          <Box display=\"flex\" justifyContent=\"center\" mb={2}>\r\n            {otp.map((data, index) => (\r\n              <TextField\r\n                key={index}\r\n                type=\"text\"\r\n                inputProps={{ maxLength: 1, style: { textAlign: 'center', fontSize: '24px' } }}\r\n                value={data}\r\n                onChange={(e) => handleChange(e.target, index)}\r\n                onFocus={(e) => e.target.select()}\r\n                className=\"otp-input\"\r\n              />\r\n            ))}\r\n          </Box>\r\n          {error && <Typography color=\"error\" align=\"center\">Please enter all 6 digits</Typography>}\r\n          <Box textAlign=\"center\">\r\n            <Button type=\"submit\" variant=\"contained\" color=\"primary\" className=\"submit-btn\">\r\n              Verify OTP\r\n            </Button>\r\n          </Box>\r\n        </form>\r\n      </Paper>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default Otp;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}