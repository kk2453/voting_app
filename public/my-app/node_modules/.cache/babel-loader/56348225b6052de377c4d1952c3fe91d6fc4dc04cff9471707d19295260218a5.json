{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\adity\\\\voting_app\\\\public\\\\my-app\\\\src\\\\context\\\\notes\\\\NoteState.js\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport Notecontext from \"./NotesContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NoteState = props => {\n  _s();\n  const host = \"http://localhost:5000\";\n  const note = [];\n  const [notes, setnotes] = useState(note);\n  const getNotes = async () => {\n    //Add api\n    const response = await fetch(\"http://localhost:5000/api/notes/fetchallcandidate\", {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        token: localStorage.getItem(\"token\")\n      }\n    });\n    const json = await response.json();\n    setnotes(json);\n  };\n  const updatecandidate = async (id, name, party, voteCount) => {\n    let url = `${host}/api/notes/updatecandidate/${id}`;\n    const response = await fetch(url, {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        name,\n        party,\n        voteCount\n      })\n    });\n    const json = await response.json();\n    console.log(json);\n    let newNotes = JSON.parse(JSON.stringify(notes));\n    for (let i = 0; i < notes.length; i++) {\n      const element = notes[i];\n      if (element._id === id) {\n        newNotes[i].name = name;\n        newNotes[i].party = party;\n        newNotes[i].voteCount = voteCount;\n        break;\n      }\n    }\n    //setnotes(newNotes);\n  };\n  //const ;\n  const [user, setuser] = useState({});\n  const getuser = async () => {\n    //Add api\n    const response = await fetch(\"http://localhost:5000/api/auth/getuser\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        token: localStorage.getItem('token')\n      }\n    });\n    const json = await response.json();\n    console.log(json);\n    setuser(json);\n  };\n  const updateuser = async (id, name, email, aadharNumber, isvoted) => {\n    let url = `${host}/api/auth/updateuser/${id}`;\n    const response = await fetch(url, {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        token: localStorage.getItem(\"token\")\n      },\n      body: JSON.stringify({\n        name,\n        email,\n        aadharNumber,\n        isvoted: true\n      })\n    });\n    const json = await response.json();\n    console.log(json);\n    setuser(json);\n    /*let newNotes = JSON.parse(JSON.stringify(user));\n    for (let i = 0; i < notes.length; i++) {\n      const element = user[i];\n      if (element._id === id) {\n        newNotes[i].name = name;\n        newNotes[i].email= email;\n        newNotes[i].aadharNumber =aadharNumber;\n        newNotes[i].isvoted =isvoted;\n        break;\n    }}\n    setuser(newNotes);*/\n  };\n  const deletecandidate = async id => {\n    //Add api\n    const response = await fetch(`http://localhost:5000/api/notes/deletecandidate/${id}`, {\n      method: \"DELETE\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        token1: localStorage.getItem('token1')\n      }\n    });\n    const json = await response.json();\n    console.log(json);\n  };\n  const addcandidate = async (name, party) => {\n    const response = await fetch(`http://localhost:5000/api/notes/addcandidate`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        token1: localStorage.getItem('token1')\n      },\n      body: JSON.stringify({\n        name,\n        party\n      })\n    });\n    const json = await response.json();\n    setnotes(notes.concat(json));\n  };\n  return /*#__PURE__*/_jsxDEV(Notecontext.Provider, {\n    value: {\n      notes,\n      getNotes,\n      updatecandidate,\n      user,\n      getuser,\n      updateuser,\n      deletecandidate,\n      addcandidate\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 122,\n    columnNumber: 5\n  }, this);\n};\n_s(NoteState, \"/psHK24KfFsuFRBVjebaccCT83w=\");\n_c = NoteState;\nexport default NoteState;\nvar _c;\n$RefreshReg$(_c, \"NoteState\");","map":{"version":3,"names":["useState","Notecontext","jsxDEV","_jsxDEV","NoteState","props","_s","host","note","notes","setnotes","getNotes","response","fetch","method","headers","token","localStorage","getItem","json","updatecandidate","id","name","party","voteCount","url","body","JSON","stringify","console","log","newNotes","parse","i","length","element","_id","user","setuser","getuser","updateuser","email","aadharNumber","isvoted","deletecandidate","token1","addcandidate","concat","Provider","value","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/adity/voting_app/public/my-app/src/context/notes/NoteState.js"],"sourcesContent":["import { useState } from \"react\";\nimport Notecontext from \"./NotesContext\";\n\nconst NoteState = (props) => {\n  const host = \"http://localhost:5000\";\n  const note = [];\n\n  const [notes, setnotes] = useState(note);\n\n  const getNotes = async () => {\n    //Add api\n    const response = await fetch(\n      \"http://localhost:5000/api/notes/fetchallcandidate\",\n      {\n        method: \"GET\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          token: localStorage.getItem(\"token\"),\n        },\n      },\n     \n    );\n    const json = await response.json();\n    setnotes(json);\n  };\n  const updatecandidate = async (id, name, party, voteCount) => {\n    let url = `${host}/api/notes/updatecandidate/${id}`;\n    const response = await fetch(url, {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({ name, party, voteCount }),\n    });\n    const json = await response.json();\n    console.log(json);\n\n    let newNotes = JSON.parse(JSON.stringify(notes));\n    for (let i = 0; i < notes.length; i++) {\n      const element = notes[i];\n      if (element._id === id) {\n        newNotes[i].name = name;\n        newNotes[i].party = party;\n        newNotes[i].voteCount = voteCount;\n        break;\n      }\n    }\n    //setnotes(newNotes);\n  };\n  //const ;\n  const [user,setuser]=useState({});\n  const getuser = async () => {\n    //Add api\n    const response = await fetch(\n      \"http://localhost:5000/api/auth/getuser\",\n      {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          token: localStorage.getItem('token'),\n        },\n      });\n    const json = await response.json();\n    console.log(json)\n    setuser(json)\n  };\n  \n  const updateuser = async (id,name,email,aadharNumber,isvoted) => {\n    let url = `${host}/api/auth/updateuser/${id}`;\n    const response = await fetch(url, {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        token: localStorage.getItem(\"token\"),\n      },\n      body: JSON.stringify({name,email,aadharNumber,isvoted:true}),\n    });\n    const json = await response.json();\n    console.log(json)\n    setuser(json)\n    /*let newNotes = JSON.parse(JSON.stringify(user));\n    for (let i = 0; i < notes.length; i++) {\n      const element = user[i];\n      if (element._id === id) {\n        newNotes[i].name = name;\n        newNotes[i].email= email;\n        newNotes[i].aadharNumber =aadharNumber;\n        newNotes[i].isvoted =isvoted;\n        break;\n    }}\n    setuser(newNotes);*/\n  };\n  const deletecandidate = async (id) => {\n    //Add api\n    const response = await fetch(\n      `http://localhost:5000/api/notes/deletecandidate/${id}`,\n      {\n        method: \"DELETE\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          token1: localStorage.getItem('token1'),\n        },\n      });\n    const json = await response.json();\n    console.log(json)\n  };\n  const addcandidate=async(name,party)=>{\n    const response = await fetch(\n      `http://localhost:5000/api/notes/addcandidate`,\n      {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          token1: localStorage.getItem('token1'),\n        },\n        body: JSON.stringify({ name,party}),\n      })\n      const json=await response.json();\n      setnotes(notes.concat(json));\n  }\n  return (\n    <Notecontext.Provider\n      value={{ notes, getNotes, updatecandidate,user,getuser,updateuser,deletecandidate,addcandidate}}\n    >\n      {props.children}\n    </Notecontext.Provider>\n  );\n};\n\nexport default NoteState;\n"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,OAAOC,WAAW,MAAM,gBAAgB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEzC,MAAMC,SAAS,GAAIC,KAAK,IAAK;EAAAC,EAAA;EAC3B,MAAMC,IAAI,GAAG,uBAAuB;EACpC,MAAMC,IAAI,GAAG,EAAE;EAEf,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGV,QAAQ,CAACQ,IAAI,CAAC;EAExC,MAAMG,QAAQ,GAAG,MAAAA,CAAA,KAAY;IAC3B;IACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAC1B,mDAAmD,EACnD;MACEC,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE;QACP,cAAc,EAAE,kBAAkB;QAClCC,KAAK,EAAEC,YAAY,CAACC,OAAO,CAAC,OAAO;MACrC;IACF,CAEF,CAAC;IACD,MAAMC,IAAI,GAAG,MAAMP,QAAQ,CAACO,IAAI,CAAC,CAAC;IAClCT,QAAQ,CAACS,IAAI,CAAC;EAChB,CAAC;EACD,MAAMC,eAAe,GAAG,MAAAA,CAAOC,EAAE,EAAEC,IAAI,EAAEC,KAAK,EAAEC,SAAS,KAAK;IAC5D,IAAIC,GAAG,GAAG,GAAGlB,IAAI,8BAA8Bc,EAAE,EAAE;IACnD,MAAMT,QAAQ,GAAG,MAAMC,KAAK,CAACY,GAAG,EAAE;MAChCX,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDW,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAEN,IAAI;QAAEC,KAAK;QAAEC;MAAU,CAAC;IACjD,CAAC,CAAC;IACF,MAAML,IAAI,GAAG,MAAMP,QAAQ,CAACO,IAAI,CAAC,CAAC;IAClCU,OAAO,CAACC,GAAG,CAACX,IAAI,CAAC;IAEjB,IAAIY,QAAQ,GAAGJ,IAAI,CAACK,KAAK,CAACL,IAAI,CAACC,SAAS,CAACnB,KAAK,CAAC,CAAC;IAChD,KAAK,IAAIwB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGxB,KAAK,CAACyB,MAAM,EAAED,CAAC,EAAE,EAAE;MACrC,MAAME,OAAO,GAAG1B,KAAK,CAACwB,CAAC,CAAC;MACxB,IAAIE,OAAO,CAACC,GAAG,KAAKf,EAAE,EAAE;QACtBU,QAAQ,CAACE,CAAC,CAAC,CAACX,IAAI,GAAGA,IAAI;QACvBS,QAAQ,CAACE,CAAC,CAAC,CAACV,KAAK,GAAGA,KAAK;QACzBQ,QAAQ,CAACE,CAAC,CAAC,CAACT,SAAS,GAAGA,SAAS;QACjC;MACF;IACF;IACA;EACF,CAAC;EACD;EACA,MAAM,CAACa,IAAI,EAACC,OAAO,CAAC,GAACtC,QAAQ,CAAC,CAAC,CAAC,CAAC;EACjC,MAAMuC,OAAO,GAAG,MAAAA,CAAA,KAAY;IAC1B;IACA,MAAM3B,QAAQ,GAAG,MAAMC,KAAK,CAC1B,wCAAwC,EACxC;MACEC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE,kBAAkB;QAClCC,KAAK,EAAEC,YAAY,CAACC,OAAO,CAAC,OAAO;MACrC;IACF,CAAC,CAAC;IACJ,MAAMC,IAAI,GAAG,MAAMP,QAAQ,CAACO,IAAI,CAAC,CAAC;IAClCU,OAAO,CAACC,GAAG,CAACX,IAAI,CAAC;IACjBmB,OAAO,CAACnB,IAAI,CAAC;EACf,CAAC;EAED,MAAMqB,UAAU,GAAG,MAAAA,CAAOnB,EAAE,EAACC,IAAI,EAACmB,KAAK,EAACC,YAAY,EAACC,OAAO,KAAK;IAC/D,IAAIlB,GAAG,GAAG,GAAGlB,IAAI,wBAAwBc,EAAE,EAAE;IAC7C,MAAMT,QAAQ,GAAG,MAAMC,KAAK,CAACY,GAAG,EAAE;MAChCX,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE;QACP,cAAc,EAAE,kBAAkB;QAClCC,KAAK,EAAEC,YAAY,CAACC,OAAO,CAAC,OAAO;MACrC,CAAC;MACDQ,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAACN,IAAI;QAACmB,KAAK;QAACC,YAAY;QAACC,OAAO,EAAC;MAAI,CAAC;IAC7D,CAAC,CAAC;IACF,MAAMxB,IAAI,GAAG,MAAMP,QAAQ,CAACO,IAAI,CAAC,CAAC;IAClCU,OAAO,CAACC,GAAG,CAACX,IAAI,CAAC;IACjBmB,OAAO,CAACnB,IAAI,CAAC;IACb;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,CAAC;EACD,MAAMyB,eAAe,GAAG,MAAOvB,EAAE,IAAK;IACpC;IACA,MAAMT,QAAQ,GAAG,MAAMC,KAAK,CAC1B,mDAAmDQ,EAAE,EAAE,EACvD;MACEP,MAAM,EAAE,QAAQ;MAChBC,OAAO,EAAE;QACP,cAAc,EAAE,kBAAkB;QAClC8B,MAAM,EAAE5B,YAAY,CAACC,OAAO,CAAC,QAAQ;MACvC;IACF,CAAC,CAAC;IACJ,MAAMC,IAAI,GAAG,MAAMP,QAAQ,CAACO,IAAI,CAAC,CAAC;IAClCU,OAAO,CAACC,GAAG,CAACX,IAAI,CAAC;EACnB,CAAC;EACD,MAAM2B,YAAY,GAAC,MAAAA,CAAMxB,IAAI,EAACC,KAAK,KAAG;IACpC,MAAMX,QAAQ,GAAG,MAAMC,KAAK,CAC1B,8CAA8C,EAC9C;MACEC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE,kBAAkB;QAClC8B,MAAM,EAAE5B,YAAY,CAACC,OAAO,CAAC,QAAQ;MACvC,CAAC;MACDQ,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAEN,IAAI;QAACC;MAAK,CAAC;IACpC,CAAC,CAAC;IACF,MAAMJ,IAAI,GAAC,MAAMP,QAAQ,CAACO,IAAI,CAAC,CAAC;IAChCT,QAAQ,CAACD,KAAK,CAACsC,MAAM,CAAC5B,IAAI,CAAC,CAAC;EAChC,CAAC;EACD,oBACEhB,OAAA,CAACF,WAAW,CAAC+C,QAAQ;IACnBC,KAAK,EAAE;MAAExC,KAAK;MAAEE,QAAQ;MAAES,eAAe;MAACiB,IAAI;MAACE,OAAO;MAACC,UAAU;MAACI,eAAe;MAACE;IAAY,CAAE;IAAAI,QAAA,EAE/F7C,KAAK,CAAC6C;EAAQ;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACK,CAAC;AAE3B,CAAC;AAAChD,EAAA,CA5HIF,SAAS;AAAAmD,EAAA,GAATnD,SAAS;AA8Hf,eAAeA,SAAS;AAAC,IAAAmD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}